{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import type { Options, JSX } from 'preact'\nimport { options as preactOptions } from 'preact'\n\nimport { TW, Configuration, Token, CSSRules, directive, Falsy } from 'twind'\nimport { tw as defaultTW, setup as setupTwind } from 'twind'\n\nexport * from 'twind'\n\nexport interface TwindPreactConfiguration {\n  props?: {\n    tw?: boolean\n    css?: boolean\n    className?: boolean\n  }\n}\n\ndeclare module 'preact' {\n  namespace JSX {\n    interface DOMAttributes<Target extends EventTarget> {\n      tw?: Token\n      css?: CSSRules | Falsy\n      class?: string\n      className?: string\n    }\n  }\n}\n\nconst css$ = (rules: CSSRules): CSSRules => rules\n\nexport const setup = (\n  {\n    props = {},\n    ...config\n  }: (TwindPreactConfiguration & { tw: TW }) | (TwindPreactConfiguration & Configuration) = {},\n  options: Options = preactOptions,\n): void => {\n  const tw = (config as { tw?: TW }).tw || defaultTW\n\n  if (!(config as { tw?: TW }).tw) {\n    setupTwind(config as Configuration)\n  }\n\n  const useTWProp = props.tw !== false\n  const useCSSProp = props.css !== false\n  const useClassNameProp = props.className === true\n\n  if (useTWProp || useCSSProp || useClassNameProp) {\n    const { vnode: vnodeHook } = options\n\n    options.vnode = (vnode) => {\n      const { props } = vnode as { props: JSX.DOMAttributes<any> }\n\n      if (typeof props == 'object') {\n        const classes: string[] = []\n\n        if (useTWProp && 'tw' in props) {\n          if (props.tw) {\n            classes.push(tw(props.tw))\n          }\n          props.tw = undefined\n        }\n\n        if (useCSSProp && 'css' in props) {\n          if (props.css) {\n            classes.push(tw(directive(css$, props.css)))\n          }\n\n          props.css = undefined\n        }\n\n        if (props.class) {\n          classes.push(useClassNameProp ? tw(props.class) : props.class)\n          props.class = undefined\n        }\n\n        if (props.className) {\n          classes.push(useClassNameProp ? tw(props.className) : props.className)\n        }\n\n        if (classes.length) {\n          props.className = classes.join(' ')\n        }\n      }\n\n      // Call previously defined hook if there was any\n      if (vnodeHook) {\n        vnodeHook(vnode)\n      }\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,oBAAyC;AAEzC,mBAAqE;AACrE,oBAAqD;AAErD,sBAAc;AAqBd,IAAM,OAAO,CAAC,UAA8B;AAErC,IAAM,QAAQ,CACnB;AAAA,EACE,QAAQ;AAAA,KACL;AAAA,IACqF,IAC1F,UAAmB,0BACV;AACT,QAAM,KAAM,OAAuB,MAAM;AAEzC,MAAI,CAAE,OAAuB,IAAI;AAC/B,6BAAW;AAAA;AAGb,QAAM,YAAY,MAAM,OAAO;AAC/B,QAAM,aAAa,MAAM,QAAQ;AACjC,QAAM,mBAAmB,MAAM,cAAc;AAE7C,MAAI,aAAa,cAAc,kBAAkB;AAC/C,UAAM,CAAE,OAAO,aAAc;AAE7B,YAAQ,QAAQ,CAAC,UAAU;AACzB,YAAM,CAAE,iBAAU;AAElB,UAAI,OAAO,UAAS,UAAU;AAC5B,cAAM,UAAoB;AAE1B,YAAI,aAAa,QAAQ,QAAO;AAC9B,cAAI,OAAM,IAAI;AACZ,oBAAQ,KAAK,GAAG,OAAM;AAAA;AAExB,iBAAM,KAAK;AAAA;AAGb,YAAI,cAAc,SAAS,QAAO;AAChC,cAAI,OAAM,KAAK;AACb,oBAAQ,KAAK,GAAG,4BAAU,MAAM,OAAM;AAAA;AAGxC,iBAAM,MAAM;AAAA;AAGd,YAAI,OAAM,OAAO;AACf,kBAAQ,KAAK,mBAAmB,GAAG,OAAM,SAAS,OAAM;AACxD,iBAAM,QAAQ;AAAA;AAGhB,YAAI,OAAM,WAAW;AACnB,kBAAQ,KAAK,mBAAmB,GAAG,OAAM,aAAa,OAAM;AAAA;AAG9D,YAAI,QAAQ,QAAQ;AAClB,iBAAM,YAAY,QAAQ,KAAK;AAAA;AAAA;AAKnC,UAAI,WAAW;AACb,kBAAU;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
