var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// index.ts
__markAsModule(exports);
__export(exports, {
  setup: () => setup
});
var import_preact = __toModule(require("preact"));
var import_twind = __toModule(require("twind"));
var import_twind2 = __toModule(require("twind"));
__exportStar(exports, __toModule(require("twind")));
var css$ = (rules) => rules;
var setup = ({
  props = {},
  ...config
} = {}, options = import_preact.options) => {
  const tw = config.tw || import_twind2.tw;
  if (!config.tw) {
    (0, import_twind2.setup)(config);
  }
  const useTWProp = props.tw !== false;
  const useCSSProp = props.css !== false;
  const useClassNameProp = props.className === true;
  if (useTWProp || useCSSProp || useClassNameProp) {
    const {vnode: vnodeHook} = options;
    options.vnode = (vnode) => {
      const {props: props2} = vnode;
      if (typeof props2 == "object") {
        const classes = [];
        if (useTWProp && "tw" in props2) {
          if (props2.tw) {
            classes.push(tw(props2.tw));
          }
          props2.tw = void 0;
        }
        if (useCSSProp && "css" in props2) {
          if (props2.css) {
            classes.push(tw((0, import_twind.directive)(css$, props2.css)));
          }
          props2.css = void 0;
        }
        if (props2.class) {
          classes.push(useClassNameProp ? tw(props2.class) : props2.class);
          props2.class = void 0;
        }
        if (props2.className) {
          classes.push(useClassNameProp ? tw(props2.className) : props2.className);
        }
        if (classes.length) {
          props2.className = classes.join(" ");
        }
      }
      if (vnodeHook) {
        vnodeHook(vnode);
      }
    };
  }
};
//# sourceMappingURL=preact.cjs.map
