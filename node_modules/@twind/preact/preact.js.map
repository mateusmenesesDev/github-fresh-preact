{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import type { Options, JSX } from 'preact'\nimport { options as preactOptions } from 'preact'\n\nimport { TW, Configuration, Token, CSSRules, directive, Falsy } from 'twind'\nimport { tw as defaultTW, setup as setupTwind } from 'twind'\n\nexport * from 'twind'\n\nexport interface TwindPreactConfiguration {\n  props?: {\n    tw?: boolean\n    css?: boolean\n    className?: boolean\n  }\n}\n\ndeclare module 'preact' {\n  namespace JSX {\n    interface DOMAttributes<Target extends EventTarget> {\n      tw?: Token\n      css?: CSSRules | Falsy\n      class?: string\n      className?: string\n    }\n  }\n}\n\nconst css$ = (rules: CSSRules): CSSRules => rules\n\nexport const setup = (\n  {\n    props = {},\n    ...config\n  }: (TwindPreactConfiguration & { tw: TW }) | (TwindPreactConfiguration & Configuration) = {},\n  options: Options = preactOptions,\n): void => {\n  const tw = (config as { tw?: TW }).tw || defaultTW\n\n  if (!(config as { tw?: TW }).tw) {\n    setupTwind(config as Configuration)\n  }\n\n  const useTWProp = props.tw !== false\n  const useCSSProp = props.css !== false\n  const useClassNameProp = props.className === true\n\n  if (useTWProp || useCSSProp || useClassNameProp) {\n    const { vnode: vnodeHook } = options\n\n    options.vnode = (vnode) => {\n      const { props } = vnode as { props: JSX.DOMAttributes<any> }\n\n      if (typeof props == 'object') {\n        const classes: string[] = []\n\n        if (useTWProp && 'tw' in props) {\n          if (props.tw) {\n            classes.push(tw(props.tw))\n          }\n          props.tw = undefined\n        }\n\n        if (useCSSProp && 'css' in props) {\n          if (props.css) {\n            classes.push(tw(directive(css$, props.css)))\n          }\n\n          props.css = undefined\n        }\n\n        if (props.class) {\n          classes.push(useClassNameProp ? tw(props.class) : props.class)\n          props.class = undefined\n        }\n\n        if (props.className) {\n          classes.push(useClassNameProp ? tw(props.className) : props.className)\n        }\n\n        if (classes.length) {\n          props.className = classes.join(' ')\n        }\n      }\n\n      // Call previously defined hook if there was any\n      if (vnodeHook) {\n        vnodeHook(vnode)\n      }\n    }\n  }\n}\n"],
  "mappings": "AACA,iCAEA,kCACA,sCAEA,mBAqBA,GAAM,GAAO,AAAC,GAA8B,EAE/B,EAAQ,CACnB,CACE,QAAQ,MACL,GACqF,GAC1F,EAAmB,IACV,CACT,GAAM,GAAM,EAAuB,IAAM,EAEzC,AAAM,EAAuB,IAC3B,EAAW,GAGb,GAAM,GAAY,EAAM,KAAO,GACzB,EAAa,EAAM,MAAQ,GAC3B,EAAmB,EAAM,YAAc,GAE7C,GAAI,GAAa,GAAc,EAAkB,CAC/C,GAAM,CAAE,MAAO,GAAc,EAE7B,EAAQ,MAAQ,AAAC,GAAU,CACzB,GAAM,CAAE,SAAU,EAElB,GAAI,MAAO,IAAS,SAAU,CAC5B,GAAM,GAAoB,GAE1B,AAAI,GAAa,MAAQ,IACnB,GAAM,IACR,EAAQ,KAAK,EAAG,EAAM,KAExB,EAAM,GAAK,QAGT,GAAc,OAAS,IACrB,GAAM,KACR,EAAQ,KAAK,EAAG,EAAU,EAAM,EAAM,OAGxC,EAAM,IAAM,QAGV,EAAM,OACR,GAAQ,KAAK,EAAmB,EAAG,EAAM,OAAS,EAAM,OACxD,EAAM,MAAQ,QAGZ,EAAM,WACR,EAAQ,KAAK,EAAmB,EAAG,EAAM,WAAa,EAAM,WAG1D,EAAQ,QACV,GAAM,UAAY,EAAQ,KAAK,MAKnC,AAAI,GACF,EAAU",
  "names": []
}
